#version 460

#include "utils/ubo.glsl"
#include "utils/ray.glsl"

#extension GL_EXT_ray_tracing : require

layout (location = 0) rayPayloadEXT HitPayload payload;

layout (set = 0, binding = 0) uniform UniformBufferObject {
    WindowRes window;
    Matrices matrices;
    MiscData misc;
} ubo;
layout (set = 0, binding = 1) uniform accelerationStructureEXT topLevelAS;
layout (set = 0, binding = 2, rgba32f) uniform image2D image;

#define AA_SAMPLES 4

const vec2 AA_COORD_OFFSETS[AA_SAMPLES] = vec2[AA_SAMPLES](
    vec2(0.25, 0.25),
    vec2(-0.25, 0.25),
    vec2(0.25, -0.25),
    vec2(-0.25, -0.25)
);

vec3 shoot_ray(vec2 uv) {
    vec2 d = uv * 2.0 - 1.0;
    d.y *= -1;

    vec4 origin = ubo.matrices.view_inverse * vec4(0, 0, 0, 1);
    vec4 target = ubo.matrices.proj_inverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = ubo.matrices.view_inverse * vec4(normalize(target.xyz), 0);

    uint ray_flags = gl_RayFlagsOpaqueEXT;
    float t_min = 0.001;
    float t_max = 10000.0;

    traceRayEXT(topLevelAS, // acceleration structure
        ray_flags,          // flags
        0xFF,               // cull mask
        0,                  // sbt record pffset
        0,                  // sbt record stride
        0,                  // miss index
        origin.xyz,         // ray origin
        t_min,              // ray min range
        direction.xyz,      // ray direction
        t_max,              // ray max range
        0                   // payload (location = 0)
    );

    return payload.hit_value;
}

void main() {
    vec2 pixel_center = gl_LaunchIDEXT.xy + vec2(0.5);
    vec3 final_color = vec3(0);

    for (uint i = 0; i < AA_SAMPLES; i++) {
        vec2 uv = (pixel_center + AA_COORD_OFFSETS[i]) / gl_LaunchSizeEXT.xy;
        vec3 color = shoot_ray(uv);
        final_color += color;
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(final_color / AA_SAMPLES, 1.0));
}
