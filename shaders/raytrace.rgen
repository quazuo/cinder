#version 460

#include "utils/ubo.glsl"
#include "utils/ray.glsl"

#extension GL_EXT_ray_tracing : require

layout (location = 0) rayPayloadEXT HitPayload payload;

layout (set = 0, binding = 0) uniform UniformBufferObject {
    WindowRes window;
    Matrices matrices;
    MiscData misc;
} ubo;
layout (set = 0, binding = 1) uniform accelerationStructureEXT topLevelAS;
layout (set = 0, binding = 2, rgba32f) uniform image2D image;

void main() {
    vec2 pixel_center = gl_LaunchIDEXT.xy + vec2(0.5);
    vec2 in_uv = pixel_center / gl_LaunchSizeEXT.xy;
    vec2 d = in_uv * 2.0 - 1.0;

    vec4 origin = ubo.matrices.view_inverse * vec4(0, 0, 0, 1);
    vec4 target = ubo.matrices.proj_inverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = ubo.matrices.view_inverse * vec4(normalize(target.xyz), 0);

    uint ray_flags = gl_RayFlagsOpaqueEXT;
    float t_min = 0.001;
    float t_max = 10000.0;

    traceRayEXT(topLevelAS, // acceleration structure
        ray_flags,          // flags
        0xFF,               // cull mask
        0,                  // sbt record pffset
        0,                  // sbt record stride
        0,                  // miss index
        origin.xyz,         // ray origin
        t_min,              // ray min range
        direction.xyz,      // ray direction
        t_max,              // ray max range
        0                   // payload (location = 0)
    );

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(payload.hit_value, 1.0));
}
